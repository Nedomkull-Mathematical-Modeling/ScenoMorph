{"version":3,"sources":["store/data.js","ControlForm.js","MultiDimensionalMatrix.js","SolutionsAndExport.js","xm.png","App.js","reportWebVitals.js","index.js","store/configureStore.js"],"names":["clearDataType","addParameterType","deleteParameterType","addFieldType","deleteFieldType","inputChangeType","changeConsistencyType","initialState","parameters","fields","matrix","Array","fill","concat","solutions","arraySum","arr","reduce","a","b","product","args","prototype","slice","call","arguments","accumulator","value","tmp","forEach","a0","a1","push","calculateSolutions","parameterLengths","map","p","length","ranges","n","i","start","stop","step","x","y","range","group","col_nbr","j","checkConsistencyOfGroup","actionCreators","clearAllData","query","dispatch","getState","type","addParameter","state","data","deleteParameter","nFields","parameterIndex","deleteFrom","splice","addField","newRowAndColumnIndex","deleteField","fieldIndex","changeName","changeConsistencyState","row_idx","column_idx","reducer","action","ControlForm","props","handleAddParameter","bind","handleDeleteParameter","handleAddField","handleDeleteField","inputFieldChanged","event","this","s","target","id","split","payload","parseInt","Paper","variant","style","backgroundColor","className","parameter","parameterName","Card","marginTop","CardContent","display","flexDirection","TextField","label","fullWidth","onChange","placeholder","inputProps","fontWeight","field","fieldName","marginLeft","marginBottom","alignItems","InputProps","startAdornment","Avatar","position","width","height","fontSize","marginRight","toString","Tooltip","title","IconButton","onClick","aria-label","color","DeleteSharp","CardActions","AddCircleSharp","Button","React","Component","connect","bindActionCreators","dataActionCreators","MultiDimensionalMatrix","cellClick","parts","TableContainer","component","Table","TableHead","TableRow","TableCell","border","TableBody","rowNumber","cell","cell_index","borderCollapse","SolutionsAndExport","showSolutionsClick","closeSolutionsClick","importClick","exportClick","clearClick","open","setState","alert","fieldNames","flat","ClearSharp","ButtonGroup","CloudUploadSharp","CloudDownloadSharp","Badge","badgeContent","anchorOrigin","vertical","horizontal","Dialog","onClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","dividers","overflowX","textAlign","solution","align","DialogActions","autoFocus","theme","createMuiTheme","palette","primary","main","secondary","Grid","container","spacing","item","xs","sm","direction","src","xm","alt","href","justify","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","reducers","Data","middleware","thunk","enhancers","rootReducer","combineReducers","createStore","compose","applyMiddleware","configureStore","window","initialReduxState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7182730.chunk.js","sourcesContent":["const clearDataType = \"CLEAR_DATA\";\r\nconst addParameterType = \"PARAMETER_ADDED\";\r\nconst deleteParameterType = \"PARAMETER_DELETED\";\r\nconst addFieldType = \"FIELD_ADDED\";\r\nconst deleteFieldType = \"FIELD_DELETED\";\r\nconst inputChangeType = \"INPUT_CHANGE\";\r\nconst changeConsistencyType = \"CHANGE_CONSISTENCY_TYPE\";\r\n\r\n\r\nconst initialState = {\r\n    parameters: [\"Actors\", \"Goals\", \"Methods\", \"Means\"],\r\n    fields: [[\"State\", \"Network\", \"Business Enterprise\", \"Individual(s)\"],\r\n    [\"Regime Change\", \"Political Concessions\", \"Mil. Exercise/Intel. Gathering\", \"Economic Gain\"],\r\n    [\"Mil. Control Entire Territory\",\r\n        \"Mil. Control Parts of Territory\",\r\n        \"Denial of Access\",\r\n        \"Symbolic Use of Force\",\r\n        \"Peace Time Operations\",\r\n        \"Att. Infrastr./Population\",\r\n        \"Economic Force\",\r\n        \"Criminality\"],\r\n    [\"Large Scale Use of Force\",\r\n        \"Limited Use of Force\",\r\n        \"Large Scale Non-Mil. Force\",\r\n        \"Limited Non-Mil. Force\",\r\n        \"Economic Sanctions\",\r\n        \"Other Means\",]],\r\n    matrix: [\r\n    \tnew Array(22).fill(false),\r\n\t\tnew Array(22).fill(false),\r\n\t\tnew Array(22).fill(false),\r\n\t\tnew Array(22).fill(false),\r\n        [true,  false, false, false].concat(new Array(22-4).fill(false)),\r\n        [true,  true,  false, true].concat(new Array(22-4).fill(false)),\r\n        [true,  true,  false, false].concat(new Array(22-4).fill(false)),\r\n        [false, false, true,  true].concat(new Array(22-4).fill(false)),\r\n\r\n        [false, false, false, false, true,  false, false, false].concat(new Array(22-4-4).fill(false)),\r\n        [true,  false, false, false, false, true,  false, false].concat(new Array(22-4-4).fill(false)),\r\n        [true,  false, false, false, false, true,  false, false].concat(new Array(22-4-4).fill(false)),\r\n        [true,  false, false, false, false, true,  false, false].concat(new Array(22-4-4).fill(false)),\r\n        [true,  false, false, false, false, false, true,  false].concat(new Array(22-4-4).fill(false)),\r\n        [true,  true,  false, true,  false, true,  false, false].concat(new Array(22-4-4).fill(false)),\r\n        [true,  false, true,  false, false, true,  false, false].concat(new Array(22-4-4).fill(false)),\r\n        [false, false, true,  true,  false, false, false, true].concat(new Array(22-4-4).fill(false)),\r\n\r\n        [true,  false, false, false, true,  true,  false, false, true,  true,  false, false, false, false, false, false,].concat(new Array(22-4-4-8).fill(false)),\r\n        [true,  false, false, false, false, true,  true,  false, false, true,  true,  true,  true,  true, false, false,].concat(new Array(22-4-4-8).fill(false)),\r\n        [false, true,  false, false, false, true,  false, false, false, false, false, false, false, true, false, false,].concat(new Array(22-4-4-8).fill(false)),\r\n        [false, true,  false, true,  false, true,  false, false, false, false, false, false, false, true, false, false,].concat(new Array(22-4-4-8).fill(false)),\r\n        [true,  false, true,  false, false, true,  false, false, false, false, false, false, false, false, true, false,].concat(new Array(22-4-4-8).fill(false)),\r\n        [true,  true,  true,  true,  false, false, false, true,  false, false, false, false, false, false, false, true,].concat(new Array(22-4-4-8).fill(false)),\r\n\t],\r\n    solutions: []\r\n};\r\nconst range = (start, stop, step=1) => Array(stop - start).fill(start).map((x, y) => x + y * step)\r\n\r\nconst arraySum = arr => arr.reduce((a,b) => a + b, 0)\r\n\r\n\r\nfunction product() {\r\n  let args = Array.prototype.slice.call(arguments); // makes array from arguments\r\n  return args.reduce(function tl (accumulator, value) {\r\n    let tmp = [];\r\n    accumulator.forEach(function (a0) {\r\n      value.forEach(function (a1) {\r\n        tmp.push(a0.concat(a1));\r\n      });\r\n    });\r\n    return tmp;\r\n  }, [[]]);\r\n}\r\n\r\nfunction checkConsistencyOfGroup(group, matrix) {\r\n    for (let i = 0; i < group.length; i++)\r\n    {\r\n        let col_nbr = group[i];\r\n        for (let j = i+1; j < group.length; j++)\r\n        {\r\n            let row_nbr = group[j];\r\n            if (!matrix[row_nbr][col_nbr])\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nconst calculateSolutions = function (parameters, matrix) {\r\n    let parameterLengths = parameters.map(p => (p.length));\r\n    let ranges = parameterLengths.map((n, i) => range(arraySum(parameterLengths.slice(0, i)), arraySum(parameterLengths.slice(0, i+1)) ));\r\n    let solutions = []\r\n    product(...ranges).forEach(group => {\r\n        let consistent = checkConsistencyOfGroup(group, matrix);\r\n        if (consistent)\r\n        {\r\n            solutions.push(group);\r\n        }\r\n    });\r\n    return solutions;\r\n};\r\n\r\nexport const actionCreators = {\r\n\r\n    // setHoverEffectOnCells: (query) => async (dispatch, getState) => {\r\n    // \tdispatch({ type: priorityInteractionHoverType, hoverEffect: query.cell });\r\n    // },\r\n    clearAllData: (query) => async (dispatch, getState) => {\r\n        dispatch({\r\n            type: clearDataType,\r\n            parameters: [],\r\n            fields: [],\r\n            matrix: [],\r\n        });\r\n    },\r\n    addParameter: (query) => async (dispatch, getState) => {\r\n        let state = getState();\r\n        dispatch({\r\n            type: addParameterType,\r\n            parameters: state.data.parameters.concat([\"\", ]),\r\n            fields: state.data.fields.concat([[], ]),\r\n        });\r\n    },\r\n    deleteParameter: (query) => async (dispatch, getState) => {\r\n        let state = getState();\r\n\r\n        let nFields = state.data.fields[query.parameterIndex].length\r\n        let parameterLengths = state.data.fields.map(p => (p.length));\r\n\r\n        // Handle matrix\r\n        let matrix = state.data.matrix.slice()\r\n        // For each row, insert a new column value.\r\n        let deleteFrom = arraySum(parameterLengths.slice(0, query.parameterIndex))\r\n        for (let i = 0; i < matrix.length; i++) {\r\n            matrix[i].splice(deleteFrom, nFields);\r\n        }\r\n        matrix.splice(deleteFrom, nFields);\r\n\r\n        // Handle Fields\r\n        let fields = state.data.fields.slice();\r\n        fields.splice(query.parameterIndex, 1);\r\n\r\n        // Handle Parameters\r\n        let parameters = state.data.parameters.slice();\r\n        parameters.splice(query.parameterIndex, 1);\r\n\r\n        dispatch({\r\n            type: deleteParameterType,\r\n            parameters: parameters,\r\n            fields: fields,\r\n            matrix: matrix\r\n        });\r\n    },\r\n    addField: (query) => async (dispatch, getState) => {\r\n        let state = getState();\r\n        let parameterLengths = state.data.fields.map(p => (p.length));\r\n\r\n        // Handle fields\r\n        let fields = state.data.fields.slice();\r\n        fields[query.parameterIndex].push(\"\");\r\n\r\n        // Handle matrix\r\n        let matrix = state.data.matrix.slice()\r\n        // For each row, insert a new column value.\r\n        let newRowAndColumnIndex = arraySum(parameterLengths.slice(0, query.parameterIndex+1))\r\n        for (let i = 0; i < matrix.length; i++) {\r\n            matrix[i].splice(newRowAndColumnIndex, 0, false);\r\n        }\r\n        matrix.splice(newRowAndColumnIndex, 0, new Array(arraySum(parameterLengths)+1).fill(false));\r\n\r\n        dispatch({\r\n            type: addFieldType,\r\n            fields: fields,\r\n            matrix: matrix,\r\n        });\r\n    },\r\n    deleteField: (query) => async (dispatch, getState) => {\r\n        let state = getState();\r\n\r\n        let nFields = 1\r\n        let parameterLengths = state.data.fields.map(p => (p.length));\r\n\r\n        // Handle matrix\r\n        let matrix = state.data.matrix.slice()\r\n        // For each row, insert a new column value.\r\n        let deleteFrom = arraySum(parameterLengths.slice(0, query.parameterIndex)) + query.fieldIndex\r\n        for (let i = 0; i < matrix.length; i++) {\r\n            matrix[i].splice(deleteFrom, nFields);\r\n        }\r\n        matrix.splice(deleteFrom, nFields);\r\n\r\n        // Handle Fields\r\n        let fields = state.data.fields.slice();\r\n        fields[query.parameterIndex].splice(query.fieldIndex, 1);\r\n\r\n        dispatch({\r\n            type: deleteFieldType,\r\n            fields: fields,\r\n            matrix: matrix\r\n        });\r\n    },\r\n    changeName: (query) => async (dispatch, getState) => {\r\n        let state = getState();\r\n\r\n        switch (query.type) {\r\n\r\n            case \"parameter\":\r\n                let parameters = state.data.parameters.slice()\r\n                parameters[query.parameterIndex] = query.value;\r\n                dispatch({\r\n                    type: inputChangeType,\r\n                    parameters: parameters,\r\n                    fields: state.data.fields\r\n                });\r\n                break\r\n            case \"field\":\r\n                let fields = state.data.fields.slice()\r\n                fields[query.parameterIndex][query.fieldIndex] = query.value;\r\n                dispatch({\r\n                    type: inputChangeType,\r\n                    parameters: state.data.parameters,\r\n                    fields: fields\r\n                });\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    changeConsistencyState: (query) => async (dispatch, getState) => {\r\n        let state = getState();\r\n        let matrix = state.data.matrix.slice();\r\n        matrix[query.row_idx][query.column_idx] = !matrix[query.row_idx][query.column_idx];\r\n        dispatch({type: changeConsistencyType, matrix});\r\n    },\r\n};\r\n\r\nexport const reducer = function (state = 0, action) {\r\n    state = state || initialState;\r\n\r\n    switch (action.type) {\r\n        case addParameterType:\r\n            return {\r\n                ...state,\r\n                parameters: action.parameters,\r\n                fields: action.fields,\r\n                solutions: calculateSolutions(action.fields, action.matrix)\r\n            };\r\n        case deleteParameterType:\r\n            return {\r\n                ...state,\r\n                parameters: action.parameters,\r\n                fields: action.fields,\r\n                matrix: action.matrix,\r\n                solutions: calculateSolutions(action.fields, action.matrix)\r\n            };\r\n        case addFieldType:\r\n            return {\r\n                ...state,\r\n                fields: action.fields,\r\n                matrix: action.matrix,\r\n                solutions: calculateSolutions(action.fields, action.matrix)\r\n            };\r\n        case deleteFieldType:\r\n            return {\r\n                ...state,\r\n                fields: action.fields,\r\n                matrix: action.matrix,\r\n                solutions: calculateSolutions(action.fields, action.matrix)\r\n            };\r\n\r\n        case inputChangeType:\r\n            return {\r\n                ...state,\r\n                parameters: action.parameters,\r\n                fields: action.fields\r\n            };\r\n        case changeConsistencyType:\r\n            return {\r\n                ...state,\r\n                matrix: action.matrix,\r\n                solutions: calculateSolutions(state.fields, action.matrix)\r\n            };\r\n\r\n        case clearDataType:\r\n            return {\r\n                ...state,\r\n                parameters: action.parameters,\r\n                fields: action.fields,\r\n                matrix: action.matrix,\r\n                solutions: []\r\n            }\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n                solutions: calculateSolutions(state.fields, state.matrix)\r\n            }\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { actionCreators as dataActionCreators } from './store/data';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {AddCircleSharp, DeleteSharp} from \"@material-ui/icons\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\n\r\nclass ControlForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleAddParameter = this.handleAddParameter.bind(this);\r\n        this.handleDeleteParameter = this.handleDeleteParameter.bind(this);\r\n        this.handleAddField = this.handleAddField.bind(this);\r\n        this.handleDeleteField = this.handleDeleteField.bind(this);\r\n\r\n        this.inputFieldChanged = this.inputFieldChanged.bind(this);\r\n    }\r\n\r\n    handleAddParameter(event) {\r\n        this.props.addParameter({});\r\n    }\r\n\r\n    handleDeleteParameter(parameterIndex) {\r\n        this.props.deleteParameter({parameterIndex: parameterIndex});\r\n    }\r\n\r\n    handleDeleteField(parameterIndex, fieldIndex) {\r\n        this.props.deleteField({parameterIndex: parameterIndex, fieldIndex: fieldIndex});\r\n    }\r\n\r\n    handleAddField(parameterIndex) {\r\n        //let s = event.target.parent.id.split('-')\r\n        this.props.addField({parameterIndex: parameterIndex});\r\n    }\r\n\r\n    inputFieldChanged(event) {\r\n        let s = event.target.id.split('-')\r\n        let payload = {value: event.target.value, parameterIndex: parseInt(s[1]), fieldIndex: parseInt(s[2]), type:s[0]};\r\n        this.props.changeName(payload);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Paper variant=\"outlined\" style={{backgroundColor: \"#fafafa\"}}>\r\n                <form className={\"control-form\"}>\r\n                    {\r\n                        this.props.parameters.map((parameter, parameterIndex) => {\r\n                            let parameterName = parameter.length > 0 ? parameter: \"Parameter \" + (parameterIndex + 1);\r\n                            return (\r\n                                <Card variant=\"outlined\" key={\"parameter-\" + parameterIndex} style={{marginTop: \"1em\", backgroundColor: \"#fbfbfb\"}}>\r\n                                    <CardContent style={{display: \"flex\", flexDirection: \"column\"}}>\r\n                                        <TextField\r\n                                            label=\"Parameter Name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            id={\"parameter-\" + parameterIndex + '-0'}\r\n                                            value={parameter}\r\n                                            onChange={this.inputFieldChanged}\r\n                                            placeholder={\"Enter name of Parameter \"  + (parameterIndex+1) + \"...\"}\r\n                                            inputProps={{style: {fontWeight: \"bold\"}}}\r\n\r\n                                        />\r\n\r\n                                        {\r\n                                            this.props.fields[parameterIndex].map((field, fieldIndex) => {\r\n                                                let fieldName = field.length > 0 ? field: \"Field \" + (fieldIndex + 1);\r\n                                                return <div key={fieldIndex} style={{ marginLeft: \"1em\", marginTop: \"0.5em\", marginBottom: \"0.5em\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\"}} >\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        onChange={this.inputFieldChanged}\r\n                                                        id={\"field-\" + parameterIndex + \"-\" + fieldIndex}\r\n                                                        value={field}\r\n                                                        placeholder={\"Enter name of \" + parameterName + \" field \" + (fieldIndex+1) + \"...\"}\r\n                                                        InputProps={{\r\n                                                          startAdornment: (\r\n                                                            <Avatar position=\"start\" style={{width: \"16px\", height: \"16px\", fontSize: \"8px\", marginRight: \"1em\", marginBottom: \"3px\"}}>\r\n                                                                {(fieldIndex + 1).toString()}\r\n                                                            </Avatar>\r\n                                                          ),\r\n                                                        }}\r\n                                                    />\r\n                                                    <Tooltip title={\"Delete \" + fieldName}>\r\n                                                        <IconButton\r\n                                                            id={\"delete-field-\" + parameterIndex + \"-\" + fieldIndex}\r\n                                                            onClick={() => {this.handleDeleteField(parameterIndex, fieldIndex);}}\r\n                                                            aria-label=\"delete field\"\r\n                                                            color=\"secondary\"\r\n                                                        >\r\n                                                          <DeleteSharp />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                </div>\r\n                                            })\r\n                                        }\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Tooltip title={\"Add a field to \" + parameterName}>\r\n                                            <IconButton\r\n                                                id={\"add-field-\" + parameterIndex}\r\n                                                onClick={() => {this.handleAddField(parameterIndex);}}\r\n                                                aria-label=\"add new field\"\r\n                                                color=\"primary\"\r\n                                            >\r\n                                              <AddCircleSharp/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip title={\"Delete \" + parameterName}>\r\n                                            <IconButton\r\n                                                id={\"delete-parameter-\" + parameterIndex}\r\n                                                onClick={() => {this.handleDeleteParameter(parameterIndex);}}\r\n                                                aria-label=\"delete parameter\"\r\n                                                color=\"secondary\"\r\n                                            >\r\n                                              <DeleteSharp/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </CardActions>\r\n                                </Card>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                    <Button\r\n                        fullWidth\r\n                        onClick={this.handleAddParameter}\r\n                        color=\"primary\"\r\n                        style={{marginTop: \"1em\", marginBottom: \"1em\"}}\r\n                    >\r\n                        <AddCircleSharp />&nbsp;Add new Parameter\r\n                    </Button>\r\n                </form>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\tstate => state.data,\r\n    dispatch => bindActionCreators({ ...dataActionCreators, }, dispatch)\r\n)(ControlForm);","import React, {Fragment} from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { actionCreators as dataActionCreators } from './store/data';\r\nimport {TableContainer} from \"@material-ui/core\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nclass MultiDimensionalMatrix extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.cellClick = this.cellClick.bind(this);\r\n    }\r\n\r\n    cellClick(event) {\r\n        let parts = event.target.id.split('-');\r\n        this.props.changeConsistencyState({row_idx: parseInt(parts[1]), column_idx: parseInt(parts[2])});\r\n        //console.log(\"cellclick: \" + event)\r\n    }\r\n\r\n    arraySum = arr => arr.reduce((a,b) => a + b, 0);\r\n\r\n    render() {\r\n        let parameterLengths = this.props.fields.map(p => (p.length));\r\n        return (\r\n            <TableContainer component={Paper} variant=\"outlined\" style={{backgroundColor: \"#fafafa\"}}>\r\n                <Table className={\"MuiTable\"} style={{marginLeft: \"1em\", marginRight: \"1em\", width: \"95%\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell style={{border: \"0 solid black\"}}></TableCell>\r\n                            {\r\n                                this.props.parameters.map((parameter, parameterIndex) => {\r\n                                    let parameterName = parameter.length > 0 ? parameter: \"Parameter \" + (parameterIndex + 1);\r\n                                    return(\r\n                                        <Fragment key={parameterIndex}>\r\n                                            {\r\n                                                this.props.fields[parameterIndex].map((field, fieldIndex) => {\r\n                                                    let fieldName = field.length > 0 ? field : parameterName + (fieldIndex + 1)\r\n                                                    return (\r\n                                                        <TableCell\r\n                                                            key={parameterIndex + \"-\" + fieldIndex}\r\n                                                            className=\"header-label-cell\"\r\n                                                        >\r\n                                                            <span>{fieldName}</span>\r\n                                                        </TableCell>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            this.props.parameters.map((parameter, parameterIndex) => {\r\n                                let parameterName = parameter.length > 0 ? parameter: \"Parameter \" + (parameterIndex + 1);\r\n                                return <Fragment key={parameterIndex}>\r\n                                    {\r\n                                        this.props.fields[parameterIndex].map((field, fieldIndex) => {\r\n                                            let fieldName = field.length > 0 ? field : parameterName + (fieldIndex+1)\r\n                                            let rowNumber = this.arraySum(parameterLengths.slice(0,parameterIndex)) + fieldIndex;\r\n                                            return <TableRow key={'field-row-'+parameterIndex + '-' + fieldIndex}>\r\n                                                <TableCell className=\"label-cell\" style={{border: \"0 solid black\"}}>{fieldName}</TableCell>\r\n                                                {\r\n                                                    this.props.matrix[rowNumber].map((cell, cell_index) => {\r\n                                                        if (cell_index < (rowNumber - fieldIndex))\r\n                                                        {\r\n                                                            return <TableCell key={cell_index} id={\"cell-\" + (rowNumber) + \"-\" + cell_index } onClick={this.cellClick} className={cell === true ? \"consistent\" : \"inconsistent\"}></TableCell>\r\n                                                        }\r\n                                                        else\r\n                                                        {\r\n                                                            return <TableCell key={cell_index} className=\"black-cell\"></TableCell>\r\n                                                        }\r\n                                                    })\r\n                                                }\r\n                                            </TableRow>\r\n\r\n                                        })\r\n                                    }\r\n                                </Fragment>\r\n\r\n                            })\r\n                        }\r\n\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        )\r\n    }\r\n\r\n    renderX() {\r\n        let parameterLengths = this.props.fields.map(p => (p.length));\r\n\r\n        return (\r\n            <div className=\"table-container\">\r\n                <table style={{borderCollapse: \"collapse\", }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{border: \"0 solid black\"}}></th>\r\n                            {\r\n                                this.props.parameters.map((parameter, parameterIndex) => {\r\n                                    let parameterName = parameter.length > 0 ? parameter: \"Parameter \" + (parameterIndex + 1);\r\n                                    return(\r\n                                        <Fragment key={parameterIndex}>\r\n                                            {\r\n                                                this.props.fields[parameterIndex].map((field, fieldIndex) => {\r\n                                                    let fieldName = field.length > 0 ? field : parameterName + (fieldIndex + 1)\r\n                                                    return <th key={parameterIndex + \"-\" + fieldIndex}\r\n                                                               className=\"rotate\" style={{border: \"0 solid black\"}}>\r\n                                                        <span>{fieldName}</span></th>\r\n                                                })\r\n                                            }\r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.props.parameters.map((parameter, parameterIndex) => {\r\n                                let parameterName = parameter.length > 0 ? parameter: \"Parameter \" + (parameterIndex + 1);\r\n                                return <Fragment key={parameterIndex}>\r\n                                    {\r\n                                        this.props.fields[parameterIndex].map((field, fieldIndex) => {\r\n                                            let fieldName = field.length > 0 ? field : parameterName + (fieldIndex+1)\r\n                                            let rowNumber = this.arraySum(parameterLengths.slice(0,parameterIndex)) + fieldIndex;\r\n                                            return <tr key={'field-row-'+parameterIndex + '-' + fieldIndex}>\r\n                                                <td className=\"label-cell\" style={{border: \"0 solid black\"}}>{fieldName}</td>\r\n                                                {\r\n                                                    this.props.matrix[rowNumber].map((cell, cell_index) => {\r\n                                                        if (cell_index < (rowNumber - fieldIndex))\r\n                                                        {\r\n                                                            return <td key={cell_index}  id={\"cell-\" + (rowNumber) + \"-\" + cell_index } onClick={this.cellClick} className={cell === true ? \"consistent\" : \"inconsistent\"}></td>\r\n                                                        }\r\n                                                        else\r\n                                                        {\r\n                                                            return <td key={cell_index} className=\"black-cell\"></td>\r\n                                                        }\r\n                                                    })\r\n                                                }\r\n                                            </tr>\r\n\r\n                                        })\r\n                                    }\r\n                                </Fragment>\r\n\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\tstate => state.data,\r\n    dispatch => bindActionCreators({ ...dataActionCreators, }, dispatch)\r\n)(MultiDimensionalMatrix);","import React, {Fragment} from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { actionCreators as dataActionCreators } from './store/data';\r\nimport {Button} from \"@material-ui/core\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport {ClearSharp, CloudDownloadSharp, CloudUploadSharp} from \"@material-ui/icons\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\n\r\n\r\nclass SolutionsAndExport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.showSolutionsClick = this.showSolutionsClick.bind(this);\r\n        this.closeSolutionsClick = this.closeSolutionsClick.bind(this);\r\n        this.importClick = this.importClick.bind(this);\r\n        this.exportClick = this.exportClick.bind(this);\r\n        this.clearClick = this.clearClick.bind(this);\r\n\r\n        this.state = {\r\n            open: false\r\n        }\r\n    }\r\n\r\n    showSolutionsClick(event) {\r\n        this.setState({open: true})\r\n    }\r\n\r\n    closeSolutionsClick(event) {\r\n        this.setState({open: false})\r\n    }\r\n\r\n    importClick(event) {\r\n        alert(\"Importing is not implemented yet!\")\r\n    }\r\n    exportClick(event) {\r\n        alert(\"Exporting is not implemented yet!\")\r\n    }\r\n    clearClick(event) {\r\n        this.props.clearAllData({});\r\n    }\r\n\r\n\r\n    render() {\r\n        let fieldNames = this.props.fields.flat()\r\n        return (\r\n            <Fragment>\r\n                <Button onClick={this.clearClick} variant=\"contained\" color=\"secondary\"><ClearSharp />&nbsp;Clear</Button>\r\n                <ButtonGroup color=\"primary\" variant=\"contained\" aria-label=\"contained primary button group\" fullWidth>\r\n                    <Button onClick={this.importClick}><CloudUploadSharp />&nbsp;Import</Button>\r\n                    <Button onClick={this.exportClick}><CloudDownloadSharp />&nbsp;Export</Button>\r\n                </ButtonGroup>\r\n                <Badge\r\n                    badgeContent={this.props.solutions.length}\r\n                    color=\"secondary\"\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <Button onClick={this.showSolutionsClick} variant=\"contained\" color=\"primary\" fullWidth>Show Solutions</Button>\r\n                </Badge>\r\n\r\n                <Dialog onClose={this.closeSolutionsClick} aria-labelledby=\"customized-dialog-title\" open={this.state.open} fullWidth={true} maxWidth = {'lg'}>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={this.closeSolutionsClick}>\r\n                      Solution space\r\n                    </DialogTitle>\r\n                    <DialogContent dividers >\r\n                        <TableContainer component={Paper} style={{overflowX: \"hidden\"}}>\r\n                          <Table className={\"MuiTable\"} aria-label=\"solution space table\">\r\n                            <TableHead style={{textAlign: \"left !important\", backgroundColor: \"#f4f4f4\"}}>\r\n                              <TableRow>\r\n                                  {\r\n                                      this.props.parameters.map(parameter => {\r\n                                          return <TableCell key={parameter} style={{fontWeight: \"bold\", border: \"1px solid silver\"}}>{parameter}</TableCell>\r\n                                      })\r\n                                  }\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                      this.props.solutions.map(solution => {\r\n                                          return <TableRow key={solution.toString()}>\r\n                                              <Fragment>\r\n                                                  {\r\n                                                      solution.map(field => {\r\n                                                          return <TableCell align=\"left\">{fieldNames[field]}</TableCell>\r\n                                                      })\r\n                                                  }\r\n                                              </Fragment>\r\n                                          </TableRow>\r\n                                      })\r\n                                }\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                      <Button autoFocus onClick={this.closeSolutionsClick} color=\"primary\" variant=\"outlined\">\r\n                        Close\r\n                      </Button>\r\n                    </DialogActions>\r\n                  </Dialog>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\tstate => state.data,\r\n    dispatch => bindActionCreators({ ...dataActionCreators, }, dispatch)\r\n)(SolutionsAndExport);","export default __webpack_public_path__ + \"static/media/xm.f151c45c.png\";","import './App.css';\r\nimport { connect } from 'react-redux';\r\nimport ControlForm from \"./ControlForm\";\r\nimport MultiDimensionalMatrix from \"./MultiDimensionalMatrix\";\r\nimport SolutionsAndExport from \"./SolutionsAndExport\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport xm from './xm.png'\r\n\r\n// Or Create your Own theme:\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#228b22\"\r\n    },\r\n    secondary: {\r\n      main: \"#f44336\"\r\n    }\r\n  }\r\n\r\n});\r\n\r\n\r\nfunction App() {\r\n  return (\r\n  <MuiThemeProvider theme={theme}>\r\n      <Grid container spacing={1}>\r\n        <Grid container item xs={12} sm={10}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              alignItems=\"flex-start\"\r\n              spacing={0}\r\n            >\r\n                <img src={xm} height=\"80\" alt=\"Scenomorph logo\"/>\r\n                <h1>ScenoMorph</h1>\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              alignItems=\"flex-start\"\r\n              spacing={0}\r\n            >\r\n                <h5>Scenario modelling with morphological analysis</h5>\r\n                <p style={{fontSize: \"x-small\"}}>Example data taken from <a href=\"https://www.sciencedirect.com/science/article/pii/S004016251730656X?via%3Dihub\">this article</a>.</p>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container item xs={12} sm={2} spacing={1} direction=\"column\" justify=\"space-evenly\">\r\n              <SolutionsAndExport></SolutionsAndExport>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3} style={{paddingTop: \"0.5em\"}}>\r\n        <Grid container item xs={12} sm={3} spacing={1} direction=\"column\" justify=\"space-around\">\r\n            <ControlForm></ControlForm>\r\n        </Grid>\r\n        <Grid container item xs={12} sm={9} spacing={1} direction=\"row\" justify=\"flex-start\">\r\n            <MultiDimensionalMatrix></MultiDimensionalMatrix>\r\n        </Grid>\r\n      </Grid>\r\n  </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default connect(state => state.data)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport configureStore from './store/configureStore';\r\n\r\n// Get the application-wide store instance, prepopulating with state\r\n// from the server where available.\r\nconst initialState = window.initialReduxState;\r\nconst store = configureStore(initialState);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport * as Data from \"./data\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const reducers = {\r\n        data: Data.reducer,\r\n    };\r\n\r\n    const middleware = [\r\n        thunk,\r\n    ];\r\n\r\n    // In development, use the browser's Redux dev tools extension if installed\r\n    const enhancers = [];\r\n    const isDevelopment = process.env.NODE_ENV === 'development';\r\n    if (isDevelopment && typeof window !== 'undefined' && window.devToolsExtension) {\r\n        enhancers.push(window.devToolsExtension());\r\n    }\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n    });\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}