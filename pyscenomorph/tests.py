import itertools
import unittest

from pyscenomorph.scenomorph import find_solutions

parameters = ["Actors", "Goals", "Methods", "Means"]
fields = [
    ["State", "Network", "Business Enterprise", "Individual(s)"],
    [
        "Regime Change",
        "Political Concessions",
        "Mil. Exercise/Intel. Gathering",
        "Economic Gain",
    ],
    [
        "Mil. Control Entire Territory",
        "Mil. Control Parts of Territory",
        "Denial of Access",
        "Symbolic Use of Force",
        "Peace Time Operations",
        "Att. Infrastr./Population",
        "Economic Force",
        "Criminality",
    ],
    [
        "Large Scale Use of Force",
        "Limited Use of Force",
        "Large Scale Non-Mil. Force",
        "Limited Non-Mil. Force",
        "Economic Sanctions",
        "Other Means",
    ],
]
matrix = [
    [
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        True,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        True,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        True,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        False,
        True,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        False,
        True,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
    [
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
    ],
]
correct_solutions = [
    [
        "State",
        "Political Concessions",
        "Mil. Control Parts of Territory",
        "Large Scale Use of Force",
    ],
    [
        "State",
        "Political Concessions",
        "Mil. Control Parts of Territory",
        "Limited Use of Force",
    ],
    [
        "State",
        "Political Concessions",
        "Denial of Access",
        "Limited Use of Force",
    ],
    ["State", "Political Concessions", "Symbolic Use of Force", "Limited Use of Force"],
    [
        "State",
        "Political Concessions",
        "Att. Infrastr./Population",
        "Limited Use of Force",
    ],
    ["State", "Political Concessions", "Economic Force", "Economic Sanctions"],
    [
        "State",
        "Mil. Exercise/Intel. Gathering",
        "Peace Time Operations",
        "Limited Use of Force",
    ],
    [
        "Network",
        "Political Concessions",
        "Att. Infrastr./Population",
        "Large Scale Non-Mil. Force",
    ],
    [
        "Network",
        "Political Concessions",
        "Att. Infrastr./Population",
        "Limited Non-Mil. Force",
    ],
    ["Business Enterprise", "Economic Gain", "Criminality", "Other Means"],
    [
        "Individual(s)",
        "Political Concessions",
        "Att. Infrastr./Population",
        "Limited Non-Mil. Force",
    ],
    ["Individual(s)", "Economic Gain", "Criminality", "Other Means"],
]


class TestScenoMorphLogic(unittest.TestCase):
    def test_find_solutions_1(self):
        solutions = find_solutions(fields, matrix)
        _all = list(itertools.chain(*fields))
        for solution in solutions:
            parsed_solution = list(map(lambda x: _all[x], solution))
            self.assertIn(parsed_solution, correct_solutions)
